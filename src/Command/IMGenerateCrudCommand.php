<?php

namespace iMokhles\IMGenerateCrudCommand\Command;

use Illuminate\Console\Command;
use Illuminate\Database\Console\Migrations\BaseCommand;
use Illuminate\Support\Composer;
use Illuminate\Database\Migrations\MigrationCreator;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Str;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;
use Illuminate\Support\Arr;

class IMGenerateCrudCommand extends BaseCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:im_crud {name} {guard_name} {--admin_theme= : chose the theme you want} {--model} : create crud model {--migration} : create crud migration';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'create crud system for guards generated by iMokhles\'s MultiAuth package';

    /**
     * @var
     */
    protected $progressBar;

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        //
        $this->progressBar = $this->output->createProgressBar(15);
        $this->progressBar->start();

        $this->line(" Preparing For CRUD. Please wait...");
        $this->progressBar->advance();

        $name = ucfirst($this->getParsedNameInput());
        $guardName = ucfirst($this->getParsedGuardNameInput());

        $admin_theme = $this->option('admin_theme');
        if (is_null($admin_theme)) {
            $admin_theme = 'oneui';
        }

        if ($this->checkIfThemeFileExistsOrNot($admin_theme)) {
            if (!$this->checkIfResponseHelperExistsOrNot()) {
                $this->line(" installing response...");
                $this->installResponseHelper();
                $this->progressBar->advance();
            }

            if (!$this->checkIfAppBaseControllerExistsOrNot()) {
                $this->line(" installing appbasecontroller...");
                $this->installAppBaseController();
                $this->progressBar->advance();
            }

            if (!$this->checkIfCRUDControllerExistsOrNot()) {
                $this->line(" installing crudcontroller...");
                $this->installCRUDController();
                $this->progressBar->advance();
            }

            if (!$this->checkIfBaseRepositoryExistsOrNot()) {
                $this->line(" installing baserepository...");
                $this->installBaseRepository();
                $this->progressBar->advance();
            }

            if (!$this->checkIfCRUDRepositoryExistsOrNot()) {
                $this->line(" installing crudrepository...");
                $this->installCRUDRepository();
                $this->progressBar->advance();
            }

            if (!$this->checkIfCRUDRequestsExistsOrNot()) {
                $this->line(" installing crudrequests...");
                $this->installCRUDRequests();
                $this->progressBar->advance();
            }

            if ($this->checkIfGuardRouteExistsOrNot()) {
                if (!$this->checkIfCRUDRouteExistsOrNot()) {
                    $this->line(" installing crudroute...");
                    $this->installCRUDRoute();
                    $this->progressBar->advance();
                }
            }

            if (!$this->checkIfCRUDViewsExistsOrNot()) {
                $this->line(" installing crudviews...");
                $this->installCRUDFields($admin_theme);
                $this->installCRUDViews($admin_theme);
                $this->progressBar->advance();
            }

            if ($this->option('model') == true) {
                if (!$this->checkIfCRUDModelExistsOrNot()) {
                    $this->installCRUDModel();
                }
            }

            if ($this->option('migration') == true) {
                if (!$this->checkIfCRUDMigrationExistsOrNot()) {
                    $this->installCRUDMigration();
                }
            }

            $this->progressBar->finish();
            $this->info(" finished ".$name." CRUD for Guard ".$guardName." setup.");

        } else {
            $this->progressBar->advance();
            $this->progressBar->finish();
            $this->line(" failed: ".$admin_theme." theme not found");
        }
        return true;
    }

    /**
     * @param $admin_theme
     * @return bool
     */
    private function checkIfThemeFileExistsOrNot($admin_theme) {
        $this->line(__DIR__ . "..".'/Stubs/Views/'.$admin_theme.'/table.blade.stub');
        return file_exists(__DIR__ . "..".'/Stubs/Views/'.$admin_theme.'/table.blade.stub');
    }

    /**
     * @return bool
     */
    private function checkIfResponseHelperExistsOrNot() {
        return file_exists($this->getHelpersPath().DIRECTORY_SEPARATOR.'ResponseHelper.php');
    }

    /**
     * @return bool
     */
    private function checkIfAppBaseControllerExistsOrNot() {
        return file_exists($this->getGuardCRUDControllersPath().DIRECTORY_SEPARATOR.'AppBaseController.php');
    }

    /**
     * @return bool
     */
    private function checkIfCRUDControllerExistsOrNot() {
        $name = ucfirst($this->getParsedNameInput());
        return file_exists($this->getGuardCRUDControllersPath().DIRECTORY_SEPARATOR.$name.'Controller.php');
    }

    /**
     * @return bool
     */
    private function checkIfBaseRepositoryExistsOrNot() {
        return file_exists($this->getRepositoriesPath().DIRECTORY_SEPARATOR.'BaseRepository.php');
    }

    /**
     * @return bool
     */
    private function checkIfCRUDRepositoryExistsOrNot() {
        $name = ucfirst($this->getParsedNameInput());
        return file_exists($this->getRepositoriesPath().DIRECTORY_SEPARATOR.$name.'Repository.php');
    }

    /**
     * @return bool
     */
    private function checkIfCRUDRequestsExistsOrNot() {
        $name = ucfirst($this->getParsedNameInput());
        return (file_exists($this->getGuardRequestsControllersPath().DIRECTORY_SEPARATOR.'Create'.$name.'Request.php')
        || file_exists($this->getGuardRequestsControllersPath().DIRECTORY_SEPARATOR.'Update'.$name.'Request.php'));
    }

    /**
     * @return bool
     */
    private function checkIfGuardRouteExistsOrNot() {
        $guardNameSmall = Str::snake($this->getParsedGuardNameInput());
        return file_exists($this->getGuardRoutesFolderPath().DIRECTORY_SEPARATOR.$guardNameSmall.'.php');
    }

    /**
     * @return bool
     */
    private function checkIfCRUDViewsExistsOrNot() {
        $name = ucfirst($this->getParsedNameInput());
        return file_exists($this->getCRUDViewsFolderPath().DIRECTORY_SEPARATOR.'create.blade.php');
    }

    /**
     * @return bool
     */
    private function checkIfCRUDModelExistsOrNot() {
        $name = ucfirst($this->getParsedNameInput());
        return file_exists($this->getModelsPath().DIRECTORY_SEPARATOR.$name.'.php');
    }

    /**
     * Creating notifications table if not exists
     */
    public function checkIfCRUDMigrationExistsOrNot() {
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $notificationsTableFile = $this->getMigrationPath().DIRECTORY_SEPARATOR."*_create_".$nameSmallPlural."_table.php";
        $globArray = glob($notificationsTableFile);
        if (count($globArray) < 1) {
            return false;
        }
        return true;
    }

    /**
     * @return bool
     */
    private function checkIfCRUDRouteExistsOrNot() {
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $name = ucfirst($this->getParsedNameInput());
        $guardNameSmall = Str::snake($this->getParsedGuardNameInput());
        $fileContent = file_get_contents( $this->getGuardRoutesFolderPath().DIRECTORY_SEPARATOR.$guardNameSmall.'.php');
        $fileContent2 = file_get_contents(__DIR__ . "..".'/Stubs/Route/route.stub');
        $fileContentRoutes = str_replace([
            '{{$name}}',
            '{{$nameSmallPlural}}',
        ], [
            $name,
            $nameSmallPlural
        ], $fileContent2);
        return (Str::contains($fileContent, $fileContentRoutes));
    }

    /**
     * Install Response Helper.
     *
     * @return boolean
     */
    public function installResponseHelper()
    {
        $createFolder = $this->getHelpersPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Helpers/ResponseHelper.stub');

        $filePath = $createFolder.DIRECTORY_SEPARATOR."ResponseHelper.php";
        file_put_contents($filePath, $fileContent);

        return true;
    }

    /**
     * Install AppBaseController Helper.
     *
     * @return boolean
     */
    public function installAppBaseController()
    {
        $guardName = ucfirst($this->getParsedGuardNameInput());
        $createFolder = $this->getGuardCRUDControllersPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Controllers/AppBaseController.stub');
        $fileContentNew = str_replace([
            '{{$guardName}}',
        ], [
            $guardName,
        ], $fileContent);

        $filePath = $createFolder.DIRECTORY_SEPARATOR."AppBaseController.php";
        file_put_contents($filePath, $fileContentNew);

        return true;
    }

    /**
     * Install CRUDController Helper.
     *
     * @return boolean
     */
    public function installCRUDController()
    {
        $nameSmall =  Str::snake($this->getParsedNameInput());
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $name = ucfirst($this->getParsedNameInput());
        $namePlural =  Str::plural($name);

        $guardNameSmall = Str::snake($this->getParsedGuardNameInput());
        $guardName = ucfirst($this->getParsedGuardNameInput());


        $createFolder = $this->getGuardCRUDControllersPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Controllers/Controller.stub');
        $fileContentNew = str_replace([
            '{{$namePlural}}',
            '{{$nameSmallPlural}}',
            '{{$nameSmall}}',
            '{{$name}}',
            '{{$guardName}}',
            '{{$guardNameSmall}}'
        ], [
            $namePlural,
            $nameSmallPlural,
            $nameSmall,
            $name,
            $guardName,
            $guardNameSmall
        ], $fileContent);


        $filePath = $createFolder.DIRECTORY_SEPARATOR.$name."Controller.php";
        file_put_contents($filePath, $fileContentNew);

        $this->line(" created controller file ".$name."Controller.php");
        return true;
    }

    /**
     * Install BaseRepository Helper.
     *
     * @return boolean
     */
    public function installBaseRepository()
    {

        $createFolder = $this->getRepositoriesPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Repositories/BaseRepository.stub');


        $filePath = $createFolder.DIRECTORY_SEPARATOR."BaseRepository.php";
        file_put_contents($filePath, $fileContent);

        return true;
    }

    /**
     * Install CRUDRepository Helper.
     *
     * @return boolean
     */
    public function installCRUDRepository()
    {
        $name = ucfirst($this->getParsedNameInput());

        $createFolder = $this->getRepositoriesPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Repositories/Repository.stub');
        $fileContentNew = str_replace([
            '{{$name}}',
        ], [
            $name,
        ], $fileContent);


        $filePath = $createFolder.DIRECTORY_SEPARATOR.$name."Repository.php";
        file_put_contents($filePath, $fileContentNew);

        $this->line(" created repository file ".$name."Repository.php");

        return true;
    }

    /**
     * Install CRUDRequests Helper.
     *
     * @return boolean
     */
    public function installCRUDRequests()
    {
        $name = ucfirst($this->getParsedNameInput());
        $guardName = ucfirst($this->getParsedGuardNameInput());

        $createFolder = $this->getGuardRequestsControllersPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Requests/CreateRequest.stub');
        $fileContentNew = str_replace([
            '{{$name}}',
            '{{$guardName}}',
        ], [
            $name,
            $guardName
        ], $fileContent);


        $filePath = $createFolder.DIRECTORY_SEPARATOR."Create".$name."Request.php";
        file_put_contents($filePath, $fileContentNew);

        $this->line(" created CreateRequest file "."Create".$name."Request.php");

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Requests/UpdateRequest.stub');
        $fileContentNew = str_replace([
            '{{$name}}',
            '{{$guardName}}',
        ], [
            $name,
            $guardName
        ], $fileContent);


        $filePath = $createFolder.DIRECTORY_SEPARATOR."Update".$name."Request.php";
        file_put_contents($filePath, $fileContentNew);

        $this->line(" created UpdateRequest file "."Update".$name."Request.php");
        return true;
    }

    /**
     * Install CRUDRoute Helper.
     *
     * @return boolean
     */
    public function installCRUDRoute()
    {
        $name = ucfirst($this->getParsedNameInput());
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $guardNameSmall = Str::snake($this->getParsedGuardNameInput());

        $createFolder = $this->getGuardRoutesFolderPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Route/route.stub');
        $fileContentRoutes = str_replace([
            '{{$name}}',
            '{{$nameSmallPlural}}',
        ], [
            $name,
            $nameSmallPlural
        ], $fileContent);



        $filePath = $this->getGuardRoutesFolderPath().DIRECTORY_SEPARATOR.$guardNameSmall.'.php';
        $fileContentNew = file_get_contents($filePath);
        if (file_exists($filePath)) {
            unlink($filePath);
        }
        file_put_contents($filePath, $fileContentNew.PHP_EOL.$fileContentRoutes);

        return true;
    }

    /**
     * Install CRUDFields Helper.
     *
     * @param string $theme_name
     * @return boolean
     */
    public function installCRUDFields($theme_name = 'adminlte2')
    {
        $name = ucfirst($this->getParsedNameInput());
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $createFolder = $this->getCRUDViewsFolderPath().DIRECTORY_SEPARATOR.'fields';
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        if (!file_exists($createFolder.DIRECTORY_SEPARATOR."textarea.blade.php")) {
            $fieldsArray = [
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/checkbox.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/datepicker.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/datetimepicker.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/email.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/password.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/select2.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/summernote.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/switch.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/text.blade.stub',
                __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/fields/textarea.blade.stub',
            ];
            foreach ($fieldsArray as $field) {

                $fieldFileName = basename($field, ".stub");
                $fieldFileName = $fieldFileName.".php";
                $newFieldPath = $createFolder.DIRECTORY_SEPARATOR.$fieldFileName;

                copy($field, $newFieldPath);

                $this->line(" created field file $fieldFileName");
            }
        }

        return true;
    }

    /**
     * Install CRUDFields Helper.
     *
     * @param string $theme_name
     * @return boolean
     */
    public function installCRUDViews($theme_name = 'adminlte2')
    {
        $nameSmall =  Str::snake($this->getParsedNameInput());
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $name = ucfirst($this->getParsedNameInput());
        $namePlural =  Str::plural($name);

        $guardNameSmall = Str::snake($this->getParsedGuardNameInput());
        $guardName = ucfirst($this->getParsedGuardNameInput());

        $createFolder = $this->getCRUDViewsFolderPath().DIRECTORY_SEPARATOR.$nameSmallPlural;
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $viewsArray = [
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/create.blade.stub',
                'originals' => [
                    '{{$guardNameSmall}}',
                    '{{$namePlural}}',
                    '{{$nameSmallPlural}}',
                ],
                'replaces' => [
                    $guardNameSmall,
                    $namePlural,
                    $nameSmallPlural
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/create_fields.blade.stub',
                'originals' => [
                    '{{$nameSmallPlural}}',
                ],
                'replaces' => [
                    $nameSmallPlural
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/edit.blade.stub',
                'originals' => [
                    '{{$guardNameSmall}}',
                    '{{$namePlural}}',
                    '{{$nameSmallPlural}}',
                    '{{$nameSmall}}',
                ],
                'replaces' => [
                    $guardNameSmall,
                    $namePlural,
                    $nameSmallPlural,
                    $nameSmall
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/edit_fields.blade.stub',
                'originals' => [
                    '{{$nameSmallPlural}}',
                    '{{$nameSmall}}',
                ],
                'replaces' => [
                    $nameSmallPlural,
                    $nameSmall
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/index.blade.stub',
                'originals' => [
                    '{{$guardNameSmall}}',
                    '{{$namePlural}}',
                    '{{$nameSmallPlural}}',
                ],
                'replaces' => [
                    $guardNameSmall,
                    $namePlural,
                    $nameSmallPlural
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/show.blade.stub',
                'originals' => [
                    '{{$guardNameSmall}}',
                    '{{$namePlural}}',
                    '{{$nameSmallPlural}}',
                ],
                'replaces' => [
                    $guardNameSmall,
                    $namePlural,
                    $nameSmallPlural
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/show_fields.blade.stub',
                'originals' => [
                    '{{$nameSmall}}'
                ],
                'replaces' => [
                    $nameSmall
                ]
            ],
            [
                'file' => __DIR__ . "..".'/Stubs/Views/'.$theme_name.'/table.blade.stub',
                'originals' => [
                    '{{$nameSmallPlural}}',
                    '{{$nameSmall}}'
                ],
                'replaces' => [
                    $nameSmallPlural,
                    $nameSmall
                ]
            ],
        ];
        foreach ($viewsArray as $view) {

            $fileContent = file_get_contents($view['file']);
            if (count($view['originals'])) {
                $fileContent = str_replace($view['originals'], $view['replaces'], $fileContent);
            }


            $viewFileName = basename($view['file'], ".stub");
            $viewFileName = $viewFileName.".php";
            $newViewPath = $createFolder.DIRECTORY_SEPARATOR.$viewFileName;

            file_put_contents($newViewPath, $fileContent);

            $this->line(" created view file $viewFileName");

        }

        return true;
    }

    /**
     * Install CRUDModel.
     *
     * @return boolean
     */
    public function installCRUDModel()
    {
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $name = ucfirst($this->getParsedNameInput());
        $createFolder = $this->getModelsPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Models/model.stub');
        $fileContentNew = str_replace([
            '{{$name}}',
            '{{$nameSmallPlural}}',
        ], [
            $name,
            $nameSmallPlural,
        ], $fileContent);

        $filePath = $createFolder.DIRECTORY_SEPARATOR.$name.".php";
        file_put_contents($filePath, $fileContentNew);

        $this->line(" created model file $name.php");

        return true;
    }

    /**
     * Install CRUDMigration.
     *
     * @return boolean
     */
    public function installCRUDMigration()
    {
        $nameSmallPlural = Str::plural(Str::snake($this->getParsedNameInput()));
        $name = ucfirst($this->getParsedNameInput());
        $namePlural =  Str::plural($name);

        $createFolder = $this->getModelsPath();
        if (!file_exists($createFolder)) {
            mkdir($createFolder);
        }

        $fileContent = file_get_contents(__DIR__ . "..".'/Stubs/Migrations/modelTable.stub');
        $fileContentNew = str_replace([
            '{{$namePlural}}',
            '{{$nameSmallPlural}}',
        ], [
            $namePlural,
            $nameSmallPlural,
        ], $fileContent);

        $migrationName = date('Y_m_d_His') . '_'.'create_' . $nameSmallPlural .'_table.php';
        $migrationModelPath = $this->getMigrationPath().DIRECTORY_SEPARATOR.$migrationName;
        file_put_contents($migrationModelPath, $fileContentNew);

        $this->line(" created migration file $migrationName");

        return true;
    }

    /**
     * Get the desired class name from the input.
     *
     * @return string
     */
    protected function getParsedNameInput()
    {
        return mb_strtolower( Str::singular($this->getNameInput()));
    }

    /**
     * Get the desired class name from the input.
     *
     * @return string
     */
    protected function getNameInput()
    {
        $name = $this->argument('name');
        return trim($name);
    }

    /**
     * Get the desired class guard name from the input.
     *
     * @return string
     */
    protected function getParsedGuardNameInput()
    {
        return mb_strtolower( Str::singular($this->getGuardNameInput()));
    }

    /**
     * Get the desired class guard name from the input.
     *
     * @return string
     */
    protected function getGuardNameInput()
    {
        $name = $this->argument('guard_name');
        return trim($name);
    }

    /**
     * Get Views Folder Path.
     *
     * @return string
     */
    protected function getViewsFolderPath()
    {
        return $this->laravel->basePath().DIRECTORY_SEPARATOR.'resources'.DIRECTORY_SEPARATOR.'views';
    }

    /**
     * Get CRUD Views Folder Path.
     *
     * @return string
     */
    protected function getCRUDViewsFolderPath()
    {
        $crudDirectory = $this->getViewsFolderPath().DIRECTORY_SEPARATOR.'crud';
        if (!file_exists($crudDirectory)) {
            mkdir($crudDirectory);
        }
        return $crudDirectory;
    }

    /**
     * Get Guard CRUD Controllers Path.
     *
     * @return string
     */
    protected function getGuardCRUDControllersPath()
    {
        return $this->getGuardControllersPath().DIRECTORY_SEPARATOR.'CRUD';
    }

    /**
     * Get Guard CRUD Controllers Path.
     *
     * @return string
     */
    protected function getGuardRequestsControllersPath()
    {
        return $this->getGuardControllersPath().DIRECTORY_SEPARATOR.'Requests';
    }

    /**
     * Get Guard Controllers Path.
     *
     * @return string
     */
    protected function getGuardControllersPath()
    {
        $guardName = ucfirst($this->getParsedGuardNameInput());
        return $this->getControllersPath().DIRECTORY_SEPARATOR.$guardName;
    }

    /**
     * Get Controllers Path.
     *
     * @return string
     */
    protected function getControllersPath()
    {
        return $this->getAppFolderPath().DIRECTORY_SEPARATOR.'Http'.DIRECTORY_SEPARATOR.'Controllers';
    }

    /**
     * Get Repositories Path.
     *
     * @return string
     */
    protected function getRepositoriesPath()
    {
        return $this->getAppFolderPath().DIRECTORY_SEPARATOR.'Repositories';
    }

    /**
     * Get Helpers Path.
     *
     * @return string
     */
    protected function getHelpersPath()
    {
        return $this->getAppFolderPath().DIRECTORY_SEPARATOR.'Helpers';
    }

    /**
     * Get Http Path.
     *
     * @return string
     */
    protected function getHttpPath()
    {
        return $this->getAppFolderPath().DIRECTORY_SEPARATOR.'Http';
    }

    /**
     * Get Models Path.
     *
     * @return string
     */
    protected function getModelsPath()
    {
        return $this->getAppFolderPath().DIRECTORY_SEPARATOR.'Models';
    }

    /**
     * Get Routes Folder Path.
     *
     * @return string
     */
    protected function getRoutesFolderPath()
    {
        return $this->laravel->basePath().DIRECTORY_SEPARATOR.'routes';
    }

    /**
     * Get GuardRoutes Folder Path.
     *
     * @return string
     */
    protected function getGuardRoutesFolderPath()
    {
        $guardNameSmall = Str::snake($this->getParsedGuardNameInput());
        return $this->laravel->basePath().DIRECTORY_SEPARATOR.'routes'.DIRECTORY_SEPARATOR.$guardNameSmall;
    }

    /**
     * Get migration path.
     *
     * @return string
     */
    protected function getMigrationPath()
    {
        return parent::getMigrationPath();
    }

    /**
     * Get Routes Folder Path.
     *
     * @return string
     */
    protected function getAppFolderPath()
    {
        return $this->laravel->basePath().DIRECTORY_SEPARATOR.'app';
    }
}
